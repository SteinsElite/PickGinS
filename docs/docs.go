// Package docs GENERATED BY THE COMMAND ABOVE; DO NOT EDIT
// This file was generated by swaggo/swag
package docs

import (
	"bytes"
	"encoding/json"
	"strings"
	"text/template"

	"github.com/swaggo/swag"
)

var doc = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/api/v1/auth/keyword_hash": {
            "get": {
                "description": "the keyword hash is sign by the account to make sure that the account is accessed",
                "produces": [
                    "application/json"
                ],
                "summary": "get the keywordHash to sign",
                "parameters": [
                    {
                        "type": "string",
                        "description": "the address of the keyword bind to",
                        "name": "address",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "integer"
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/auth/{address}/add_publisher": {
            "post": {
                "description": "add new publisher who is ability to publish new notification(",
                "produces": [
                    "application/json"
                ],
                "summary": "add new publisher",
                "parameters": [
                    {
                        "type": "string",
                        "description": "the publisher address is login now",
                        "name": "address",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "signature of the publisher address",
                        "name": "signature",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "the address of new publisher to add",
                        "name": "new_publisher",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "the keyword been used to sign",
                        "name": "keyword",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": ""
                    }
                }
            }
        },
        "/api/v1/chart/profit": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "summary": "get the phased profit info",
                "parameters": [
                    {
                        "type": "string",
                        "description": "the duration to query-{7D,1M,1Y}",
                        "name": "range",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "the [(timestamp,profit)] in the time range"
                    }
                }
            }
        },
        "/api/v1/chart/ratio": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "summary": "get the ratio info",
                "responses": {
                    "200": {
                        "description": "amount of each asset in usd"
                    }
                }
            }
        },
        "/api/v1/chart/volume": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "summary": "get the total volume info",
                "parameters": [
                    {
                        "type": "string",
                        "description": "the duration to query-{7D,1M,1Y}",
                        "name": "range",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "the [(timestamp,volume)] in the time range"
                    }
                }
            }
        },
        "/api/v1/notification": {
            "get": {
                "description": "obtains the specific notification by the tag",
                "produces": [
                    "application/json"
                ],
                "summary": "get notification info",
                "parameters": [
                    {
                        "type": "string",
                        "description": "tag of the notification-{QuotaUpdate,Activity,Weekly}, if not specify, get all the category",
                        "name": "tag",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "index of page",
                        "name": "page",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "size of each page",
                        "name": "page_size",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/notification.Notification"
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/notification/{publisher}": {
            "post": {
                "description": "publish new notification with title, content, category",
                "produces": [
                    "application/json"
                ],
                "summary": "publish new notification",
                "parameters": [
                    {
                        "type": "string",
                        "description": "the publisher address",
                        "name": "publisher",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "the signature of the publisher",
                        "name": "signature",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "the title of the notification",
                        "name": "title",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "the content of the notification",
                        "name": "content",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "the category of the notification: { QuotaUpdate, Weekly, Activity}",
                        "name": "category",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": ""
                    }
                }
            }
        },
        "/api/v1/price_info/{coin}": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "summary": "get the Coin Price info and trend",
                "parameters": [
                    {
                        "type": "string",
                        "description": "{BTC,ETH,USDT,HT,MDX}",
                        "name": "coin",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "the price trend of coin, {\"rate\": ..., \"trend\": ...}"
                    }
                }
            }
        },
        "/api/v1/transaction/{address}": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "summary": "get the transaction info",
                "parameters": [
                    {
                        "type": "string",
                        "description": "user account address",
                        "name": "address",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "tag of the transaction-{deposit,withdraw,claimProfit}, if not specify, get all the category",
                        "name": "tag",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "index of page",
                        "name": "page",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "size of each page",
                        "name": "page_size",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "the transaction of the page"
                    },
                    "400": {
                        "description": "Invalid params"
                    },
                    "500": {
                        "description": "Server error"
                    }
                }
            }
        }
    },
    "definitions": {
        "notification.Notification": {
            "type": "object",
            "properties": {
                "category": {
                    "type": "string"
                },
                "content": {
                    "type": "string"
                },
                "timeStamp": {
                    "type": "integer"
                },
                "title": {
                    "type": "string"
                }
            }
        }
    }
}`

type swaggerInfo struct {
	Version     string
	Host        string
	BasePath    string
	Schemes     []string
	Title       string
	Description string
}

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = swaggerInfo{
	Version:     "1.0",
	Host:        "",
	BasePath:    "/api/v1",
	Schemes:     []string{},
	Title:       "pick finance api",
	Description: "API to get data from blockchain",
}

type s struct{}

func (s *s) ReadDoc() string {
	sInfo := SwaggerInfo
	sInfo.Description = strings.Replace(sInfo.Description, "\n", "\\n", -1)

	t, err := template.New("swagger_info").Funcs(template.FuncMap{
		"marshal": func(v interface{}) string {
			a, _ := json.Marshal(v)
			return string(a)
		},
		"escape": func(v interface{}) string {
			// escape tabs
			str := strings.Replace(v.(string), "\t", "\\t", -1)
			// replace " with \", and if that results in \\", replace that with \\\"
			str = strings.Replace(str, "\"", "\\\"", -1)
			return strings.Replace(str, "\\\\\"", "\\\\\\\"", -1)
		},
	}).Parse(doc)
	if err != nil {
		return doc
	}

	var tpl bytes.Buffer
	if err := t.Execute(&tpl, sInfo); err != nil {
		return doc
	}

	return tpl.String()
}

func init() {
	swag.Register(swag.Name, &s{})
}
